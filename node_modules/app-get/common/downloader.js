'use strict';

const _ = require('underscore');
const got = require('got');
const fs = require('fs');
const chalk = require('chalk');
const html = new (require('html-entities').XmlEntities)();

const dispatch = {
  wdj: {
    validate(url) {
      const pattern1 = new RegExp('^(https?://)?www\.wandoujia\.com/apps/([\w.]+)', 'i');
      const pattern2 = new RegExp('^(https?://)?apps\.wandoujia\.com/apps/([\w.]+)', 'i');
      return typeof(url) == 'string' && (pattern1.test(url) || pattern2.test(url));
    },
    
    // resolve(url), reject(error)
    fetch(pkg) {
      return new Promise((resolve, reject) => {
        try {
          got('http://apps.wandoujia.com/apps/' + pkg).then(res => {
            const body = html.decode(res.body);
            const match = /downloadURL[^]*?href[^]*?url=(.*?)[&"]/g.exec(body);
            if (!match || match.length != 2) {
              reject(new Error("Wandoujia download matching failed"))
            } else {
              resolve(decodeURIComponent(match[1]))
            }
          }, reject)
        } catch(e) {
          reject(e)
        }
      })
    }
  }
};

const download = function(url, name) {
  const stream = got.stream(url);
  let total = 0;
  let received = 0;
  stream.on('response', res => {
    total = res.headers['content-length'];
    stream.on('data', trunk =>  {
      received += trunk.length;
      const width = process.stdout.columns - 5;
      const bar = _.range(Math.floor(received / total * width)).map(()=>'#').reduce((a,b)=>a+b,'\r') + '>';
      const float = _.range(width - bar.length - 1).map(()=>' ').reduce((a,b)=>a+b, '');
      const rate = Math.floor(received / total * 1000) / 10 + '%';
      process.stdout.write(bar + float + rate);
    });
  });
  stream.on('end', () => {
    const space = _.range(process.stdout.columns - 4).map(()=> ' ').reduce((a,b)=>a+b, '');
    process.stdout.write(`\rDONE${space}\n`)
  });
  stream.pipe(fs.createWriteStream(name));
};

module.exports = {

  downloadPackage(pkg) {
    dispatch.wdj.fetch(pkg).then(url => download(url, pkg + '.apk'));
  },

  downloadUrl(url, name) {
    download(url, name);
  },

  // resolve(url), reject(error)
  searchPackage(pkg) {
    return dispatch.wdj.fetch(pkg)
  }
};

